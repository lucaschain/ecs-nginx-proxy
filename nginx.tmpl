# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}
# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}
gzip on;
gzip_proxied any;
gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';
access_log off;
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
# Mitigate httpoxy attack (see https://github.com/jwilder/nginx-proxy for details)
proxy_set_header Proxy "";
server {
        server_name _; # This is just an invalid value which will never trigger on a real hostname.
        listen 80;
        access_log /var/log/nginx/access.log vhost;
        location = / {
                return 200 'nginx is alive';
                add_header Content-Type text/plain;
        }
        location / {
                return 503;
        }
}


{{ range $domain, $container := . }}
  {{ range $_, $value := $container }}
    upstream {{ $domain }} {
      server {{ $value.Address }}:{{ $value.Port }};
    }
    server {
      server_name {{ $domain }};
      listen {{ $value.ListenPort }};
      access_log /var/log/nginx/access-{{ $domain }}.log vhost;
      location / {
        {{ if $value.Auth }}
          auth_basic "Apenas Justers podem acessar.";
          auth_basic_user_file /etc/nginx/.htpasswd;
          proxy_set_header Authorization "";
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $http_host;
          proxy_redirect off;
        {{ end }}
        proxy_pass http://{{ $domain }};
      }
      location ~*  \.(jpg|jpeg|png|gif|ico|css|js|woff|ttf)$ {
        expires 10d;
        proxy_pass http://{{ $domain }};
      }
    }
  {{ end }}
{{ end }}
